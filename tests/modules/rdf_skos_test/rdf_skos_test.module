<?php

/**
 * @file
 * The RDF Skos test module.
 */

declare(strict_types=1);

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_query_QUERY_TAG_alter().
 *
 * Alters the entity_test field_fruit field.
 */
function rdf_skos_test_query_skos_concept_field_selection_plugin_alter(AlterableInterface $query) {
  $field_info = $query->getMetaData('field');
  if (!$field_info) {
    return;
  }

  $condition = \Drupal::state()->get('rdf_skos_test_query_skos_concept_field_selection_plugin_alter', []);
  if ($field_info['field_name'] === 'field_fruit' && count($field_info['concept_schemes']) === 1 && $field_info['concept_schemes'][0] === 'http://example.com/fruit' && $condition) {
    $query->condition($condition['field'], $condition['value']);
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Define two dummy base fields on the Concept entity in order to test we can
 * map a single predicate to both of them.
 */
function rdf_skos_test_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() !== 'skos_concept') {
    return [];
  }

  $fields = [];

  $fields['dummy_field_one'] = BaseFieldDefinition::create('string')
    ->setLabel(t('A dummy title for field one'))
    ->setDescription(t('A dummy title value for field one.'));

  $fields['dummy_field_two'] = BaseFieldDefinition::create('string')
    ->setLabel(t('A dummy title for field two'))
    ->setDescription(t('A dummy title value for field two.'));

  return $fields;
}
