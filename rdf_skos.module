<?php

/**
 * @file
 * The RDF Skos module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\field\FieldStorageConfigInterface;

/**
 * Implements hook_field_views_data_alter().
 *
 * Ensure that the Views filters based on the SKOS entity reference field type
 * use the SkosConceptReferenceId filter plugin.
 */
function rdf_skos_field_views_data_alter(array &$data, FieldStorageConfigInterface $field_storage) {
  if ($field_storage->getType() !== 'skos_concept_entity_reference') {
    return;
  }

  foreach ($data as $table_name => $table_data) {
    foreach ($table_data as $field_name => $field_data) {
      if (isset($field_data['filter']) && $field_name != 'delta') {
        $data[$table_name][$field_name]['filter']['id'] = 'skos_concept_reference_id';
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Provide the base field definitions of all the predicate mapping concept
 * subset plugins.
 */
function rdf_skos_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() !== 'skos_concept') {
    return [];
  }

  $fields = [];

  /** @var \Drupal\rdf_skos\ConceptSubsetPluginManagerInterface $manager */
  $manager = \Drupal::service('plugin.manager.concept_subset');
  $definitions = $manager->getPredicateMappingDefinitions();
  foreach ($definitions as $id => $definition) {
    /** @var \Drupal\rdf_skos\Plugin\PredicateMapperInterface $plugin */
    $plugin = $manager->createInstance($id);
    $base_fields = $plugin->getBaseFieldDefinitions();
    if ($base_fields) {
      $fields += $base_fields;
    }
  }

  return $fields;
}
